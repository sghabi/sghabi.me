{"version":3,"sources":["serviceWorker.js","Window.js","TypingText.js","ressources/welcome.js","Desktop.js","index.js"],"names":["Boolean","window","location","hostname","match","windowStyle","position","_default","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isHidden","close","bind","assertThisInitialized","setState","height","innerHeight","width","innerWidth","style","objectSpread","left","top","react_default","a","createElement","react_draggable_default","className","macOs","chrome","concat","padding","background","hidden","title","name","controls","onCloseClick","children","Component","message","index","_this2","timerID","setInterval","typeText","speed","clearInterval","text","length","divStyle","color","welcome","Desktop","Window_default","src_TypingText_default","WelcomeMessage","ReactDOM","render","src_Desktop","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,gJCbAC,EAAc,CAClBC,SAAU,0BAQV,SAAAC,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAGDQ,MAAQ,CACXC,UAAU,GAIZR,EAAKS,MAAQT,EAAKS,MAAMC,KAAXT,OAAAU,EAAA,EAAAV,CAAAD,IATIA,uEAgBjBG,KAAKS,SAAS,CAAEJ,UAAU,qCAK1B,IAAMK,EAASrB,OAAOsB,YAAc,EAC9BC,EAAQvB,OAAOwB,WAAa,IAC5BC,EAAKhB,OAAAiB,EAAA,EAAAjB,CAAA,GACNL,EADM,CAETuB,MAAO3B,OAAOwB,WAAaD,GAAS,EAAI,KACxCK,KAAM5B,OAAOsB,YAAcD,GAAU,EAAI,OAG3C,OACEQ,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACED,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAACG,EAAA,OAAD,CACET,MAAOA,EACPU,QAAM,EACNd,OAAM,GAAAe,OAAKf,EAAL,MACNE,MAAK,GAAAa,OAAKb,EAAL,MACLc,QAAQ,OACRC,WAAY3B,KAAKJ,MAAM+B,WACvBC,OAAQ5B,KAAKI,MAAMC,UAEnBa,EAAAC,EAAAC,cAACG,EAAA,SAAD,CACEM,MAAO7B,KAAKJ,MAAMkC,KAClBC,UAAQ,EACRC,aAAchC,KAAKM,QAEpBN,KAAKJ,MAAMqC,mBAnDKC,mCCD3B,SAAAvC,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAGDQ,MAAQ,CACX+B,QAAS,GACTC,MAAO,GANQvC,mFAaC,IAAAwC,EAAArC,KAElBA,KAAKsC,QAAUC,YAAY,kBAAMF,EAAKG,YAAYxC,KAAKJ,MAAM6C,sDAQ7DC,cAAc1C,KAAKsC,4CAQftC,KAAKI,MAAMgC,OAASpC,KAAKJ,MAAM+C,KAAKC,OACtCF,cAAc1C,KAAKsC,SAKrBtC,KAAKS,SAAS,CACZ0B,QAASnC,KAAKI,MAAM+B,QAAUnC,KAAKJ,MAAM+C,KAAK3C,KAAKI,MAAMgC,OACzDA,MAAOpC,KAAKI,MAAMgC,MAAQ,qCAM5B,IAAMS,EAAW,CACfC,MAAO9C,KAAKJ,MAAMkD,OAGpB,OACE5B,EAAAC,EAAAC,cAAA,OAAKN,MAAO+B,GACV3B,EAAAC,EAAAC,cAAA,WAAMpB,KAAKI,MAAM+B,iBAxDID,cCHfa,EAAA,2YCaCC,MARf,WACE,OACE9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAQtB,WAAW,OAAOG,KAAK,YAC7BZ,EAAAC,EAAAC,cAAC8B,EAAD,CAAYT,MAAM,KAAKE,KAAMQ,EAAgBL,MAAM,qBCFzDM,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAAaC,SAASC,eAAe,SL2H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1aac7520.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport { Window, TitleBar } from \"react-desktop/macOs\";\nimport Draggable from \"react-draggable\";\n\n// Default style for window\nconst windowStyle = {\n  position: \"absolute\"\n};\n\nexport default class extends Component {\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n\n    // Initialize the state\n    this.state = {\n      isHidden: false\n    };\n\n    // Bind \"this\"\n    this.close = this.close.bind(this);\n  }\n\n  /**\n   * Closes the window.\n   */\n  close() {\n    this.setState({ isHidden: true });\n  }\n\n  render() {\n    // Set style\n    const height = window.innerHeight / 2;\n    const width = window.innerWidth / 2.5;\n    const style = {\n      ...windowStyle,\n      left: (window.innerWidth - width) / 2 + \"px\",\n      top: (window.innerHeight - height) / 2 + \"px\"\n    };\n\n    return (\n      <Draggable>\n        <div className=\"window\">\n          <Window\n            style={style}\n            chrome\n            height={`${height}px`}\n            width={`${width}px`}\n            padding=\"10px\"\n            background={this.props.background}\n            hidden={this.state.isHidden}\n          >\n            <TitleBar\n              title={this.props.name}\n              controls\n              onCloseClick={this.close}\n            />\n            {this.props.children}\n          </Window>\n        </div>\n      </Draggable>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./TypingText.css\";\n\nexport default class extends Component {\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n\n    // Initialize the state\n    this.state = {\n      message: \"\",\n      index: 0\n    };\n  }\n\n  /**\n   * Actions to execute after the component is mounted.\n   */\n  componentDidMount() {\n    // Execute typeText by interval\n    this.timerID = setInterval(() => this.typeText(), this.props.speed);\n  }\n\n  /**\n   * Actions to execute after the component is unmounted.\n   */\n  componentWillUnmount() {\n    // Clear the interval\n    clearInterval(this.timerID);\n  }\n\n  /**\n   * Types the text letter by letter.\n   */\n  typeText() {\n    // When the text has been entirely written, clear the interval\n    if (this.state.index >= this.props.text.length) {\n      clearInterval(this.timerID);\n      return;\n    }\n\n    // Append one letter to the message\n    this.setState({\n      message: this.state.message + this.props.text[this.state.index],\n      index: this.state.index + 1\n    });\n  }\n\n  render() {\n    // Set style from props\n    const divStyle = {\n      color: this.props.color\n    };\n\n    return (\n      <div style={divStyle}>\n        <pre>{this.state.message}</pre>\n      </div>\n    );\n  }\n}\n","export default `\n  Hi there ! \n  I'm Sonia, a 27 years old french currently living in Singapore.\n  I'm a software engineer who has worked mostly on back end (Java/J2EE and C#/.NET), but trying to learn more about \n  fullstack technologies. This website is implemented using React and Node.js.\n  Feel free to try the different features of this website, everything you think is clickable actually is :).\n`;\n","import React from \"react\";\nimport Window from \"./Window.js\";\nimport TypingText from \"./TypingText\";\nimport WelcomeMessage from \"./ressources/welcome.js\";\n\nfunction Desktop() {\n  return (\n    <Window background=\"#000\" name=\"Terminal\">\n      <TypingText speed=\"50\" text={WelcomeMessage} color=\"#56CE06\" />\n    </Window>\n  );\n}\n\nexport default Desktop;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Desktop from \"./Desktop\";\nimport \"./index.css\";\n\nReactDOM.render(<Desktop />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}