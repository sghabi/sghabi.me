{"ast":null,"code":"var _jsxFileName = \"/Users/Sonia/Projets/sghabi.me/client/src/Icon.js\";\nimport React, { Component } from \"react\";\nimport Draggable from \"react-draggable\";\nimport PdfReader from \"./PdfReader\";\nimport ImgReader from \"./ImgReader\";\nimport \"./style/Icon.css\";\n\nclass Icon extends Component {\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props); // Initialize state\n\n    this.state = {\n      reader: false\n    }; // Set the props for the reader\n\n    const readerProps = {\n      url: this.props.url,\n      onClose: () => this.closeReader(),\n      name: this.props.name\n    }; // Map each file type to an icon and a component type\n\n    this.map = {\n      pdf: {\n        path: \"/ressources/icons/pdf.png\",\n        component: React.createElement(PdfReader, Object.assign({}, readerProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }))\n      },\n      jpg: {\n        path: \"/ressources/icons/jpg.png\",\n        component: React.createElement(ImgReader, Object.assign({}, readerProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }))\n      }\n    }; // Bind \"this\"\n\n    this.openReader = this.openReader.bind(this);\n    this.closeReader = this.closeReader.bind(this);\n  }\n\n  openReader() {\n    this.setState({\n      reader: true\n    });\n  }\n\n  closeReader() {\n    this.setState({\n      reader: false\n    });\n  }\n\n  render() {\n    // Get the information about the icon, if the type is not handled render nothing\n    const icon = this.map[this.props.type];\n    if (icon == null) return React.createElement(React.Fragment, null);\n    return React.createElement(React.Fragment, null, React.createElement(Draggable, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"iconImg\",\n      src: icon.path,\n      draggable: \"false\",\n      onDoubleClick: () => this.openReader(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"iconTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, this.props.name))), this.state.reader && icon.component);\n  }\n\n}\n\nexport default Icon;","map":{"version":3,"sources":["/Users/Sonia/Projets/sghabi.me/client/src/Icon.js"],"names":["React","Component","Draggable","PdfReader","ImgReader","Icon","constructor","props","state","reader","readerProps","url","onClose","closeReader","name","map","pdf","path","component","jpg","openReader","bind","setState","render","icon","type"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,kBAAP;;AAEA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAC3B;;;;AAIAK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE;AADG,KAAb,CAJiB,CAQjB;;AACA,UAAMC,WAAW,GAAG;AAClBC,MAAAA,GAAG,EAAE,KAAKJ,KAAL,CAAWI,GADE;AAElBC,MAAAA,OAAO,EAAE,MAAM,KAAKC,WAAL,EAFG;AAGlBC,MAAAA,IAAI,EAAE,KAAKP,KAAL,CAAWO;AAHC,KAApB,CATiB,CAejB;;AACA,SAAKC,GAAL,GAAW;AACTC,MAAAA,GAAG,EAAE;AACHC,QAAAA,IAAI,EAAE,2BADH;AAEHC,QAAAA,SAAS,EAAE,oBAAC,SAAD,oBAAeR,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR,OADI;AAKTS,MAAAA,GAAG,EAAE;AACHF,QAAAA,IAAI,EAAE,2BADH;AAEHC,QAAAA,SAAS,EAAE,oBAAC,SAAD,oBAAeR,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR;AALI,KAAX,CAhBiB,CA2BjB;;AACA,SAAKU,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKR,WAAL,GAAmB,KAAKA,WAAL,CAAiBQ,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDD,EAAAA,UAAU,GAAG;AACX,SAAKE,QAAL,CAAc;AAAEb,MAAAA,MAAM,EAAE;AAAV,KAAd;AACD;;AAEDI,EAAAA,WAAW,GAAG;AACZ,SAAKS,QAAL,CAAc;AAAEb,MAAAA,MAAM,EAAE;AAAV,KAAd;AACD;;AAEDc,EAAAA,MAAM,GAAG;AACP;AACA,UAAMC,IAAI,GAAG,KAAKT,GAAL,CAAS,KAAKR,KAAL,CAAWkB,IAApB,CAAb;AACA,QAAID,IAAI,IAAI,IAAZ,EAAkB,OAAO,yCAAP;AAClB,WACE,0CACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,SAAS,EAAC,SADZ;AAEE,MAAA,GAAG,EAAEA,IAAI,CAACP,IAFZ;AAGE,MAAA,SAAS,EAAC,OAHZ;AAIE,MAAA,aAAa,EAAE,MAAM,KAAKG,UAAL,EAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOE;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0B,KAAKb,KAAL,CAAWO,IAArC,CAPF,CADF,CADF,EAYG,KAAKN,KAAL,CAAWC,MAAX,IAAqBe,IAAI,CAACN,SAZ7B,CADF;AAgBD;;AAjE0B;;AAoE7B,eAAeb,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Draggable from \"react-draggable\";\nimport PdfReader from \"./PdfReader\";\nimport ImgReader from \"./ImgReader\";\nimport \"./style/Icon.css\";\n\nclass Icon extends Component {\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n\n    // Initialize state\n    this.state = {\n      reader: false\n    };\n\n    // Set the props for the reader\n    const readerProps = {\n      url: this.props.url,\n      onClose: () => this.closeReader(),\n      name: this.props.name\n    };\n\n    // Map each file type to an icon and a component type\n    this.map = {\n      pdf: {\n        path: \"/ressources/icons/pdf.png\",\n        component: <PdfReader {...readerProps} />\n      },\n      jpg: {\n        path: \"/ressources/icons/jpg.png\",\n        component: <ImgReader {...readerProps} />\n      }\n    };\n\n    // Bind \"this\"\n    this.openReader = this.openReader.bind(this);\n    this.closeReader = this.closeReader.bind(this);\n  }\n\n  openReader() {\n    this.setState({ reader: true });\n  }\n\n  closeReader() {\n    this.setState({ reader: false });\n  }\n\n  render() {\n    // Get the information about the icon, if the type is not handled render nothing\n    const icon = this.map[this.props.type];\n    if (icon == null) return <></>;\n    return (\n      <>\n        <Draggable>\n          <div className=\"icon\">\n            <img\n              className=\"iconImg\"\n              src={icon.path}\n              draggable=\"false\"\n              onDoubleClick={() => this.openReader()}\n            />\n            <p className=\"iconTitle\">{this.props.name}</p>\n          </div>\n        </Draggable>\n        {this.state.reader && icon.component}\n      </>\n    );\n  }\n}\n\nexport default Icon;\n"]},"metadata":{},"sourceType":"module"}