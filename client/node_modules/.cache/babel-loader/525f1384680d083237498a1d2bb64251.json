{"ast":null,"code":"var _jsxFileName = \"/Users/Sonia/Projets/sghabi.me/client/src/PdfReader.js\";\nimport React, { Component } from \"react\";\nimport { pdfjs, Document, Page } from \"react-pdf\";\nimport Window from \"./Window.js\";\nimport \"./style/PdfReader.css\";\npdfjs.GlobalWorkerOptions.workerSrc = \"//cdnjs.cloudflare.com/ajax/libs/pdf.js/\".concat(pdfjs.version, \"/pdf.worker.js\");\n\nclass PdfReader extends Component {\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props); // Initialize the state\n\n    this.onDocumentLoadSuccess = ({\n      numPages\n    }) => {\n      this.setState({\n        numPages\n      });\n    };\n\n    this.state = {\n      numPages: null,\n      pageNumber: 1\n    }; // Bind \"this\"\n\n    this.onDocumentLoadSuccess = this.onDocumentLoadSuccess.bind(this);\n    this.paginate = this.paginate.bind(this);\n  }\n  /**\n   * Update the total number of pages when load is successfull.\n   */\n\n\n  /**\n   * Append a new page component for each pdf page.\n   */\n  paginate() {\n    let pages = [];\n    console.log(this.state.numPages);\n\n    for (let i = 1; i <= this.state.numPages; i++) {\n      pages.push(React.createElement(Page, {\n        pageNumber: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }));\n    }\n\n    return pages;\n  }\n\n  render() {\n    return React.createElement(Window, {\n      onClose: this.props.onClose,\n      name: this.props.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Document, {\n      file: this.props.url,\n      onLoadSuccess: this.onDocumentLoadSuccess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, this.paginate()));\n  }\n\n}\n\nexport default PdfReader;","map":{"version":3,"sources":["/Users/Sonia/Projets/sghabi.me/client/src/PdfReader.js"],"names":["React","Component","pdfjs","Document","Page","Window","GlobalWorkerOptions","workerSrc","version","PdfReader","constructor","props","onDocumentLoadSuccess","numPages","setState","state","pageNumber","bind","paginate","pages","console","log","i","push","render","onClose","name","url"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,IAA1B,QAAsC,WAAtC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAO,uBAAP;AAEAH,KAAK,CAACI,mBAAN,CAA0BC,SAA1B,qDACEL,KAAK,CAACM,OADR;;AAIA,MAAMC,SAAN,SAAwBR,SAAxB,CAAkC;AAChC;;;;AAIAS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AAHiB,SAiBnBC,qBAjBmB,GAiBK,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAkB;AACxC,WAAKC,QAAL,CAAc;AAAED,QAAAA;AAAF,OAAd;AACD,KAnBkB;;AAIjB,SAAKE,KAAL,GAAa;AACXF,MAAAA,QAAQ,EAAE,IADC;AAEXG,MAAAA,UAAU,EAAE;AAFD,KAAb,CAJiB,CASjB;;AACA,SAAKJ,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BK,IAA3B,CAAgC,IAAhC,CAA7B;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAhB;AACD;AAED;;;;;AAOA;;;AAGAC,EAAAA,QAAQ,GAAG;AACT,QAAIC,KAAK,GAAG,EAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAL,CAAWF,QAAvB;;AACA,SAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAKP,KAAL,CAAWF,QAAhC,EAA0CS,CAAC,EAA3C,EAA+C;AAC7CH,MAAAA,KAAK,CAACI,IAAN,CAAW,oBAAC,IAAD;AAAM,QAAA,UAAU,EAAED,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAX;AACD;;AACD,WAAOH,KAAP;AACD;;AAEDK,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKb,KAAL,CAAWc,OAA5B;AAAqC,MAAA,IAAI,EAAE,KAAKd,KAAL,CAAWe,IAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AACE,MAAA,IAAI,EAAE,KAAKf,KAAL,CAAWgB,GADnB;AAEE,MAAA,aAAa,EAAE,KAAKf,qBAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIG,KAAKM,QAAL,EAJH,CADF,CADF;AAUD;;AAjD+B;;AAoDlC,eAAeT,SAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { pdfjs, Document, Page } from \"react-pdf\";\nimport Window from \"./Window.js\";\nimport \"./style/PdfReader.css\";\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${\n  pdfjs.version\n}/pdf.worker.js`;\n\nclass PdfReader extends Component {\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n\n    // Initialize the state\n    this.state = {\n      numPages: null,\n      pageNumber: 1\n    };\n\n    // Bind \"this\"\n    this.onDocumentLoadSuccess = this.onDocumentLoadSuccess.bind(this);\n    this.paginate = this.paginate.bind(this);\n  }\n\n  /**\n   * Update the total number of pages when load is successfull.\n   */\n  onDocumentLoadSuccess = ({ numPages }) => {\n    this.setState({ numPages });\n  };\n\n  /**\n   * Append a new page component for each pdf page.\n   */\n  paginate() {\n    let pages = [];\n    console.log(this.state.numPages);\n    for (let i = 1; i <= this.state.numPages; i++) {\n      pages.push(<Page pageNumber={i} />);\n    }\n    return pages;\n  }\n\n  render() {\n    return (\n      <Window onClose={this.props.onClose} name={this.props.name}>\n        <Document\n          file={this.props.url}\n          onLoadSuccess={this.onDocumentLoadSuccess}\n        >\n          {this.paginate()}\n        </Document>\n      </Window>\n    );\n  }\n}\n\nexport default PdfReader;\n"]},"metadata":{},"sourceType":"module"}