{"ast":null,"code":"var _jsxFileName = \"/Users/Sonia/Projets/sghabi.me/client/src/TypingText.js\";\nimport React, { Component } from \"react\";\nimport \"./style/TypingText.css\";\n\nclass TypingText extends Component {\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props); // Initialize the state\n\n    this.state = {\n      message: \"\",\n      index: 0\n    };\n  }\n  /**\n   * Actions to execute after the component is mounted.\n   */\n\n\n  componentDidMount() {\n    // Execute typeText by interval\n    this.timerID = setInterval(() => this.typeText(), this.props.speed);\n  }\n  /**\n   * Actions to execute after the component is unmounted.\n   */\n\n\n  componentWillUnmount() {\n    // Clear the interval\n    clearInterval(this.timerID);\n  }\n  /**\n   * Types the text letter by letter.\n   */\n\n\n  typeText() {\n    // When the text has been entirely written, clear the interval\n    if (this.state.index >= this.props.text.length) {\n      clearInterval(this.timerID);\n      return;\n    } // Append one letter to the message\n\n\n    this.setState({\n      message: this.state.message + this.props.text[this.state.index],\n      index: this.state.index + 1\n    });\n  }\n\n  render() {\n    // Set style from props\n    const divStyle = {\n      color: this.props.color\n    };\n    return React.createElement(\"div\", {\n      style: divStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"pre\", {\n      className: \"typedText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, this.state.message));\n  }\n\n}\n\nexport default TypingText;","map":{"version":3,"sources":["/Users/Sonia/Projets/sghabi.me/client/src/TypingText.js"],"names":["React","Component","TypingText","constructor","props","state","message","index","componentDidMount","timerID","setInterval","typeText","speed","componentWillUnmount","clearInterval","text","length","setState","render","divStyle","color"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,wBAAP;;AAEA,MAAMC,UAAN,SAAyBD,SAAzB,CAAmC;AACjC;;;;AAIAE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,EADE;AAEXC,MAAAA,KAAK,EAAE;AAFI,KAAb;AAID;AAED;;;;;AAGAC,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKC,OAAL,GAAeC,WAAW,CAAC,MAAM,KAAKC,QAAL,EAAP,EAAwB,KAAKP,KAAL,CAAWQ,KAAnC,CAA1B;AACD;AAED;;;;;AAGAC,EAAAA,oBAAoB,GAAG;AACrB;AACAC,IAAAA,aAAa,CAAC,KAAKL,OAAN,CAAb;AACD;AAED;;;;;AAGAE,EAAAA,QAAQ,GAAG;AACT;AACA,QAAI,KAAKN,KAAL,CAAWE,KAAX,IAAoB,KAAKH,KAAL,CAAWW,IAAX,CAAgBC,MAAxC,EAAgD;AAC9CF,MAAAA,aAAa,CAAC,KAAKL,OAAN,CAAb;AACA;AACD,KALQ,CAOT;;;AACA,SAAKQ,QAAL,CAAc;AACZX,MAAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC,OAAX,GAAqB,KAAKF,KAAL,CAAWW,IAAX,CAAgB,KAAKV,KAAL,CAAWE,KAA3B,CADlB;AAEZA,MAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE,KAAX,GAAmB;AAFd,KAAd;AAID;;AAEDW,EAAAA,MAAM,GAAG;AACP;AACA,UAAMC,QAAQ,GAAG;AACfC,MAAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWgB;AADH,KAAjB;AAIA,WACE;AAAK,MAAA,KAAK,EAAED,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4B,KAAKd,KAAL,CAAWC,OAAvC,CADF,CADF;AAKD;;AA3DgC;;AA6DnC,eAAeJ,UAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style/TypingText.css\";\n\nclass TypingText extends Component {\n  /**\n   * Constructor\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n\n    // Initialize the state\n    this.state = {\n      message: \"\",\n      index: 0\n    };\n  }\n\n  /**\n   * Actions to execute after the component is mounted.\n   */\n  componentDidMount() {\n    // Execute typeText by interval\n    this.timerID = setInterval(() => this.typeText(), this.props.speed);\n  }\n\n  /**\n   * Actions to execute after the component is unmounted.\n   */\n  componentWillUnmount() {\n    // Clear the interval\n    clearInterval(this.timerID);\n  }\n\n  /**\n   * Types the text letter by letter.\n   */\n  typeText() {\n    // When the text has been entirely written, clear the interval\n    if (this.state.index >= this.props.text.length) {\n      clearInterval(this.timerID);\n      return;\n    }\n\n    // Append one letter to the message\n    this.setState({\n      message: this.state.message + this.props.text[this.state.index],\n      index: this.state.index + 1\n    });\n  }\n\n  render() {\n    // Set style from props\n    const divStyle = {\n      color: this.props.color\n    };\n\n    return (\n      <div style={divStyle}>\n        <pre className=\"typedText\">{this.state.message}</pre>\n      </div>\n    );\n  }\n}\nexport default TypingText;\n"]},"metadata":{},"sourceType":"module"}